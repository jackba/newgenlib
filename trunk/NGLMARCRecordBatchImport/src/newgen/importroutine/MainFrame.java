/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on May 31, 2011, 3:49:51 PM
 */
package newgen.importroutine;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileFilter;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamReader;
import newgenlib.marccomponent.conversion.Converter;
import newgenlib.marccomponent.marcmodel.CatalogMaterialDescription;
import newgenlib.marccomponent.marcmodel.ControlField;
import newgenlib.marccomponent.marcmodel.Field;
import newgenlib.marccomponent.marcmodel.FixedFieldProcessor;
import newgenlib.marccomponent.marcmodel.Leader;
import newgenlib.marccomponent.marcmodel.SubField;
import newgenlib.marccomponent.persistence.PersistMARCRecord;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.marc4j.marc.Subfield;
import org.verus.ngl.indexing.CorporateNameSolrIndexCreator;
import org.verus.ngl.indexing.FormGenreSolrIndexCreator;
import org.verus.ngl.indexing.MeetingNameSolrIndexCreator;
import org.verus.ngl.indexing.NewBibliographicSolrIndexCreator;
import org.verus.ngl.indexing.PersonalNameSolrIndexCreator;
import org.verus.ngl.indexing.SubGeoNameSolrIndexCreator;
import org.verus.ngl.indexing.SubTopicSolrIndexCreator;
import org.verus.ngl.indexing.UniformTitleSolrIndexCreator;

/**
 *
 * @author siddartha
 */
public class MainFrame extends javax.swing.JFrame {

    char recorDelim = '';

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tfExcelSheet = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Select the excel sheet");
        jPanel3.add(jLabel2, new java.awt.GridBagConstraints());

        tfExcelSheet.setColumns(15);
        jPanel3.add(tfExcelSheet, new java.awt.GridBagConstraints());

        jButton4.setText("...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4, new java.awt.GridBagConstraints());

        jButton5.setText("Generate ISBNs text file for MARC Edit");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jButton5, gridBagConstraints);

        getContentPane().add(jPanel3);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Select the MARC XML file");
        jPanel1.add(jLabel1, new java.awt.GridBagConstraints());

        jTextField1.setColumns(15);
        jTextField1.setEditable(false);
        jPanel1.add(jTextField1, new java.awt.GridBagConstraints());

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new java.awt.GridBagConstraints());

        jButton2.setText("Show me a report of the above selected file");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jButton2, gridBagConstraints);

        getContentPane().add(jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButton3.setText("Import the above file");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new java.awt.GridBagConstraints());

        getContentPane().add(jPanel2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser("/home/siddartha/Share");
        jfc.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if (f.getName().contains("xml") || f.isDirectory()) {
                    return true;
                } else {
                    return false;
                }
            }

            @Override
            public String getDescription() {
                return "(.xml) MARCXML";
            }
        });
        int option = jfc.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            jTextField1.setText(jfc.getSelectedFile().getAbsolutePath());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        SwingWorker sw = new SwingWorker() {

            int recordCount = 0;

            @Override
            protected Object doInBackground() throws Exception {
                try {
                    System.out.println("jTextField1.getText() " + jTextField1.getText());
                    FileInputStream fis = new FileInputStream(jTextField1.getText());
                    XMLInputFactory factory = XMLInputFactory.newInstance();
                    XMLStreamReader parser = factory.createXMLStreamReader(fis);
                    int recordCountM = 0;
                    while (parser.hasNext()) {
                        String nameele = "";
                        try {
                            nameele = parser.getLocalName();
                        } catch (Exception ex) {
                        }
                        if (parser.getEventType() == XMLStreamConstants.START_ELEMENT && nameele != null && nameele.equals("record")) {
                            recordCountM++;
                        }
                        parser.next();
                    }
                    parser.close();
                    recordCount = recordCountM;
                } catch (Exception e) {
                    e.printStackTrace();
                }
                JOptionPane.showMessageDialog(null, "Found " + recordCount + " records", "Records count", JOptionPane.INFORMATION_MESSAGE);
                return "";
            }
        };
        sw.execute();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("org.postgresql.Driver");
            Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/IITH", "newgenlib", "newgenlib");
            PersistMARCRecord psm = new PersistMARCRecord("1", "1", "1", "1", "1", con, false);
            FileInputStream fis = new FileInputStream("/home/siddartha/Share/abc.xml");
            XMLInputFactory factory = XMLInputFactory.newInstance();
            XMLStreamReader parser = factory.createXMLStreamReader(fis);
            int recordCount = 0;
            CatalogMaterialDescription cmd = null;
            ArrayList alfields = null;
            ArrayList alControlFields = null;
            ArrayList alsubfields = null;
            ControlField currentcf = null;
            Field currentField = null;
            SubField currentSF = null;
            char currentSFIden = ' ';
            String currentSFData = "";
            FixedFieldProcessor ffp = null;
            String currentLeader = "";
            String currently = "";
            String currentTag = "";
            while (parser.hasNext()) {
                int event = parser.getEventType();
//                System.out.println(parser.getEventType());
                String nameele = null;
                try {
                    nameele = parser.getLocalName();
                } catch (Exception ex) {
                }

                //System.out.println("nameele: " + nameele);
                switch (event) {
                    case XMLStreamConstants.START_ELEMENT:
                        if (nameele != null) {
                            if (nameele.equals("record")) {
                                ffp = new FixedFieldProcessor();
                                cmd = new CatalogMaterialDescription();
                                currentLeader = "";
                                alfields = new ArrayList();
                                alControlFields = new ArrayList();
                                recordCount++;
                            } else if (nameele.equals("controlfield")) {
                                currently = "controlfield";
//                                System.out.println("controlfield staretd");
                                int count = parser.getAttributeCount();
                                String tag = "";
                                for (int i = 0; i < count; i++) {
                                    tag = parser.getAttributeValue(i);
//                                    System.out.println(parser.getAttributeName(i) + "=" + parser.getAttributeValue(i));
                                }
                                currentcf = new ControlField();
                                currentcf.setTag(tag);
                            } else if (nameele.equals("datafield")) {
                                int count = parser.getAttributeCount();
                                String tag = "";
                                String i1 = "";
                                String i2 = "";
                                for (int i = 0; i < count; i++) {
                                    String attrname = parser.getAttributeName(i).getLocalPart();
                                    String aattrval = parser.getAttributeValue(i);
                                    if (attrname.equals("tag")) {
                                        tag = aattrval;
                                    }
                                    if (attrname.equals("ind1")) {
                                        i1 = aattrval;
                                    }
                                    if (attrname.equals("ind2")) {
                                        i2 = aattrval;
                                    }

                                }

                                char i1c = ' ';
                                char i2c = ' ';
                                if (i1.length() > 0) {
                                    i1c = i1.charAt(0);
                                }
                                if (i2.length() > 0) {
                                    i2c = i2.charAt(0);
                                }
                                currentField = new Field(tag, i1c, i2c);
                                alsubfields = new ArrayList();
                                currentTag = tag;
                            } else if (nameele.equals("subfield")) {
                                currently = "subfield";
                                int count = parser.getAttributeCount();
                                String code = "";
                                for (int i = 0; i < count; i++) {
                                    code = parser.getAttributeValue(i);
                                }
                                currentSFIden = code.charAt(0);
                            } else if (nameele.equals("leader")) {
                                currently = "leader";

                            }

//                        System.out.println("Starting: "+parser.getLocalName());
                        }
                        break;
                    case XMLStreamConstants.END_ELEMENT:
                        if (nameele != null) {
                            if (nameele.equals("controlfield")) {
                                alControlFields.add(currentcf);
                            } else if (nameele.equals("subfield")) {
                                currentSF = new SubField(currentSFIden, currentSFData);
                                alsubfields.add(currentSF);
                            } else if (nameele.equals("datafield")) {
                                currentField.addSubField(alsubfields);
                                if (!currentTag.startsWith("9")) {
                                    alfields.add(currentField);
                                }
                            } else if (nameele.equals("record")) {
                                cmd.setLeader(currentLeader);
                                cmd.addControlField(alControlFields);
                                cmd.addField(alfields);
                                cmd.setFixedField(ffp.fxld);
                                System.out.println(cmd);
                                saveRecord(cmd, psm);
                            } else if (nameele.equals("leader")) {
                                ffp.startLeader(new Leader(currentLeader));
                            }
                        }
                        break;
                    case XMLStreamConstants.CHARACTERS:
                        if (currently.equals("controlfield")) {
                            currentcf.setData(parser.getText());
                            ffp.startControlField(currentcf.getTag(), currentcf.getData());
                        }
                        if (currently.equals("subfield")) {
                            currentSFData = parser.getText();
                        }
                        if (currently.equals("leader")) {
                            currentLeader = parser.getText();
                        }

                        break;
                    case XMLStreamConstants.CDATA:
                        break;
                } // end switch

                parser.next();
            } // end while
            parser.close();
            System.out.println("Total number of records: " + recordCount);
        } catch (Exception e) {
            e.printStackTrace();
        }
        indexDatabase();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser();
        jfc.addChoosableFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if (f.getName().toLowerCase().contains("xls") || f.isDirectory()) {
                    return true;
                } else {
                    return false;
                }
            }

            @Override
            public String getDescription() {
                return "xls";
            }
        });
        jfc.addChoosableFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                if (f.getName().toLowerCase().contains("xlsx") || f.isDirectory()) {
                    return true;
                } else {
                    return false;
                }
            }

            @Override
            public String getDescription() {
                return "xlsx";
            }
        });
        int sel = jfc.showOpenDialog(this);
        if (sel == JFileChooser.APPROVE_OPTION) {
            tfExcelSheet.setText(jfc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed
    public void indexDatabase() {
        try {
            NewBibliographicSolrIndexCreator.getInstance().deleteData();
            NewBibliographicSolrIndexCreator.getInstance().indexingData();
            CorporateNameSolrIndexCreator.getInstance().indexData();
            FormGenreSolrIndexCreator.getInstance().indexData();
            MeetingNameSolrIndexCreator.getInstance().indexData();
            PersonalNameSolrIndexCreator.getInstance().indexData();
            SubGeoNameSolrIndexCreator.getInstance().indexData();
            SubTopicSolrIndexCreator.getInstance().indexData();
            UniformTitleSolrIndexCreator.getInstance().indexData();
        } catch (Exception exp) {
            System.out.println("Error in indexing !!!!!!!!!!!");
        }
    }

    public void insertAccessionNumbers() {
        org.apache.poi.ss.usermodel.Workbook wb = null;
        if (tfExcelSheet.getText().toLowerCase().endsWith("xls")) {
            try {
                wb = new HSSFWorkbook(new FileInputStream(tfExcelSheet.getText()));
            } catch (Exception ex) {
            }
        } else if (tfExcelSheet.getText().toLowerCase().endsWith("xlsx")) {
            try {
                wb = new XSSFWorkbook(new FileInputStream(new File(tfExcelSheet.getText())));
            } catch (Exception e) {
            }
        }
        if(wb!=null){
            Sheet sheet = wb.getSheetAt(0);
            for (Row row : sheet) {
                for (Cell cell : row) {
                    // Do something here
                    switch (cell.getCellType()) {
                        
                    }
                    System.out.print("+++");
                }
                System.out.println("");
                System.out.println("-----------------------------------------------New Row----------------------------------");
            }
        }
    }

    public void saveRecord(CatalogMaterialDescription cmd, PersistMARCRecord psm) {
        System.out.println(cmd);
        psm.persist3_0(cmd, "1", "3", "");
    }

    public int countOccurrences(String haystack, char needle) {
        int count = 0;
        for (int i = 0; i < haystack.length(); i++) {
            if (haystack.charAt(i) == needle) {
                count++;
            }
        }
        return count;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField tfExcelSheet;
    // End of variables declaration//GEN-END:variables
}
